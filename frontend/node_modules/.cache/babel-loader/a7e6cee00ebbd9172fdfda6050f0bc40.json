{"ast":null,"code":"import _classCallCheck from \"/Users/martin/Desktop/CodeClan/april/final_project/front_End_Resturant_Booking_System_project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/martin/Desktop/CodeClan/april/final_project/front_End_Resturant_Booking_System_project/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/martin/Desktop/CodeClan/april/final_project/front_End_Resturant_Booking_System_project/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/martin/Desktop/CodeClan/april/final_project/front_End_Resturant_Booking_System_project/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/martin/Desktop/CodeClan/april/final_project/front_End_Resturant_Booking_System_project/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/martin/Desktop/CodeClan/april/final_project/front_End_Resturant_Booking_System_project/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/martin/Desktop/CodeClan/april/final_project/front_End_Resturant_Booking_System_project/src/containers/RestaurantViewContainer.js\";\nimport React, { Component } from \"react\";\nimport { browserHistory } from 'react-router';\nimport Request from \"../helpers/requests.js\";\nimport \"./css/RestaurantViewContainer.css\";\nimport BookingList from \"../containers/BookingListContainer.js\";\nimport TableList from \"../Components/TableListComponent.js\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nvar RestaurantViewContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RestaurantViewContainer, _Component);\n\n  function RestaurantViewContainer(props) {\n    var _this;\n\n    _classCallCheck(this, RestaurantViewContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RestaurantViewContainer).call(this, props));\n    _this.state = {\n      tables: [],\n      customers: _this.props.customers,\n      bookings: [],\n      date: new Date(),\n      time: null\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleDateChange = _this.handleDateChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTimeChange = _this.handleTimeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNewBooking = _this.handleNewBooking.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(RestaurantViewContainer, [{\n    key: \"handleChange\",\n    value: function handleChange(date) {\n      this.setState({\n        startDate: date\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      console.log('will mount');\n      var request = new Request();\n      request.get('customers/').then(function (res) {\n        _this2.setState({\n          customers: res._embedded.customers\n        });\n      });\n      this.getTables();\n    }\n  }, {\n    key: \"getTables\",\n    value: function getTables() {\n      var _this3 = this;\n\n      var request = new Request();\n      request.get('restaurantTables/').then(function (res) {\n        _this3.setState({\n          tables: res._embedded.restaurantTables\n        });\n\n        var allTables = _this3.state.tables;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = allTables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var table = _step.value;\n            table.taken = false;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        _this3.setState({\n          tables: allTables\n        });\n      });\n    }\n  }, {\n    key: \"getBookingsByDate\",\n    value: function getBookingsByDate(url) {\n      var _this4 = this;\n\n      var request = new Request();\n      request.get(url).then(function (res) {\n        _this4.setState({\n          bookings: res\n        });\n\n        _this4.getTables();\n      });\n    }\n  }, {\n    key: \"getBookingsByHour\",\n    value: function getBookingsByHour(url) {\n      var _this5 = this;\n\n      var request = new Request();\n      request.get(url).then(function (res) {\n        _this5.setState({\n          bookings: res\n        });\n\n        _this5.updateTakenTables();\n      });\n    }\n  }, {\n    key: \"updateTakenTables\",\n    value: function updateTakenTables() {\n      var newTableState = this.state.tables;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.state.bookings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var booking = _step2.value;\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = newTableState[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var freeTable = _step3.value;\n\n              if (booking.restaurantTable.id === freeTable.tableNumber) {\n                freeTable.taken = true;\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.setState({\n        tables: newTableState\n      });\n    }\n  }, {\n    key: \"handleDateChange\",\n    value: function handleDateChange(event) {\n      this.setState({\n        date: event.target.value\n      });\n    }\n  }, {\n    key: \"handleTimeChange\",\n    value: function handleTimeChange(event) {\n      this.setState({\n        time: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n      var date = this.state.date;\n      var time = event.target.time.value;\n\n      if (typeof time == \"string\" && time != 0) {\n        this.setState({\n          time: time\n        });\n      } else {\n        this.setState({\n          time: null\n        });\n        time = null;\n      }\n\n      if (!time) {\n        console.log('by date', time);\n        this.props.getBookingsByDate(\"bookings/date/\".concat(date));\n      } else {\n        console.log('by hour', time);\n        this.props.getBookingsByHour(\"bookings/date/\".concat(date, \"/time/\").concat(time));\n      }\n    }\n  }, {\n    key: \"handleNewBooking\",\n    value: function handleNewBooking(event) {\n      var tableToBook = event.target.textContent;\n      this.props.history.push(\"/newbooking/\".concat(tableToBook));\n    } // Date <input type=\"text\" onChange={this.handleDateChange} />\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"top-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(DatePicker, {\n        selected: this.state.date,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        name: \"time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Any Time\"), React.createElement(\"option\", {\n        value: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"15:00\"), React.createElement(\"option\", {\n        value: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"16:00\"), React.createElement(\"option\", {\n        value: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"17:00\"), React.createElement(\"option\", {\n        value: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"18:00\"), React.createElement(\"option\", {\n        value: \"7\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"19:00\"), React.createElement(\"option\", {\n        value: \"8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"20:00\"), React.createElement(\"option\", {\n        value: \"9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"21:00\"), React.createElement(\"option\", {\n        value: \"10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"22:00\")), \"Search \", React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(TableList, {\n        tables: this.props.tables,\n        time: this.state.time,\n        date: this.state.date,\n        handleNewBooking: this.handleNewBooking,\n        editBooking: this.props.editBooking,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(BookingList, {\n        bookings: this.props.bookings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return RestaurantViewContainer;\n}(Component);\n\nexport default RestaurantViewContainer;","map":{"version":3,"sources":["/Users/martin/Desktop/CodeClan/april/final_project/front_End_Resturant_Booking_System_project/src/containers/RestaurantViewContainer.js"],"names":["React","Component","browserHistory","Request","BookingList","TableList","DatePicker","RestaurantViewContainer","props","state","tables","customers","bookings","date","Date","time","handleChange","bind","handleDateChange","handleTimeChange","handleSubmit","handleNewBooking","setState","startDate","console","log","request","get","then","res","_embedded","getTables","restaurantTables","allTables","table","taken","url","updateTakenTables","newTableState","booking","freeTable","restaurantTable","id","tableNumber","event","target","value","preventDefault","getBookingsByDate","getBookingsByHour","tableToBook","textContent","history","push","editBooking"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {browserHistory} from 'react-router';\nimport Request from \"../helpers/requests.js\";\nimport \"./css/RestaurantViewContainer.css\";\nimport BookingList from \"../containers/BookingListContainer.js\";\nimport TableList from \"../Components/TableListComponent.js\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass RestaurantViewContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tables: [],\n      customers: this.props.customers,\n      bookings: [],\n      date: new Date(),\n      time: null\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleNewBooking = this.handleNewBooking.bind(this);\n  }\n\n\n  handleChange(date) {\n    this.setState({\n      startDate: date\n    });\n  }\n\n  componentWillMount() {\n    console.log('will mount')\n    const request = new Request();\n    request.get('customers/')\n      .then(res => {\n        this.setState({customers: res._embedded.customers})\n      })\n    this.getTables();\n  }\n\n\n  getTables() {\n    const request = new Request();\n    request.get('restaurantTables/')\n      .then(res => {\n        this.setState({tables: res._embedded.restaurantTables})\n\n        const allTables = this.state.tables\n\n        for (const table of allTables) {\n          table.taken = false;\n        }\n\n        this.setState({tables: allTables})\n      })\n  }\n\n  getBookingsByDate(url) {\n    const request = new Request();\n    request.get(url)\n      .then(res => {\n        this.setState({bookings: res})\n        this.getTables()\n      })\n  }\n\n  getBookingsByHour(url) {\n    const request = new Request();\n    request.get(url)\n      .then(res => {\n        this.setState({bookings: res})\n        this.updateTakenTables()\n      })\n  }\n\n  updateTakenTables() {\n    const newTableState = this.state.tables;\n    for (const booking of this.state.bookings) {\n      for (const freeTable of newTableState) {\n        if (booking.restaurantTable.id === freeTable.tableNumber) {\n          freeTable.taken = true;\n        }\n      }\n    }\n    this.setState({tables: newTableState})\n  }\n\n  handleDateChange(event) {\n    this.setState({date: event.target.value})\n  }\n\n  handleTimeChange(event) {\n    this.setState({time: event.target.value})\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    const date = this.state.date;\n    let time = event.target.time.value;\n    if ((typeof(time) == \"string\") && (time != 0)) {\n      this.setState({time: time})\n    } else {\n        this.setState({time: null})\n        time = null;\n    }\n\n    if (!time) {\n      console.log('by date', time)\n      this.props.getBookingsByDate(`bookings/date/${date}`)\n    } else {\n      console.log('by hour', time)\n      this.props.getBookingsByHour(`bookings/date/${date}/time/${time}`)\n    }\n  }\n\n  handleNewBooking(event) {\n    const tableToBook = event.target.textContent;\n    this.props.history.push(`/newbooking/${tableToBook}`)\n  }\n  // Date <input type=\"text\" onChange={this.handleDateChange} />\n\n  render() {\n    return(\n      <React.Fragment>\n          <div className=\"top-section\">\n            <form onSubmit={this.handleSubmit}>\n                    <DatePicker\n              selected={this.state.date}\n              onChange={this.handleChange}\n            />\n            <select name=\"time\">\n              <option value=\"0\">Any Time</option>\n              <option value=\"3\">15:00</option>\n              <option value=\"4\">16:00</option>\n              <option value=\"5\">17:00</option>\n              <option value=\"6\">18:00</option>\n              <option value=\"7\">19:00</option>\n              <option value=\"8\">20:00</option>\n              <option value=\"9\">21:00</option>\n              <option value=\"10\">22:00</option>\n            </select>\n              Search <input type=\"submit\" />\n            </form>\n          </div>\n          <div className=\"grid\">\n            <TableList tables={this.props.tables} time={this.state.time} date={this.state.date} handleNewBooking={this.handleNewBooking} editBooking={this.props.editBooking}/>\n            <BookingList bookings={this.props.bookings}/>\n          </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default RestaurantViewContainer;\n"]},"metadata":{},"sourceType":"module"}